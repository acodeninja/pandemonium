name: 🚀 release

run-name: 🚀 @${{ github.triggering_actor }} is publishing a new release on ${{ github.ref_name }} channel

on:
  push:
    branches:
      - main
      - next

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build:
    name: 🏗️ build for ${{ matrix.build.target }}
    runs-on: ${{ matrix.build.runner }}
    strategy:
      matrix:
        build:
          - target: macos
            runner: macos-latest
          - target: linux
            runner: ubuntu-latest
          - target: windows
            runner: windows-latest
    steps:
      - name: 📥 checkout
        uses: actions/checkout@v4
      - name: 🧰 install toolchain
        if: matrix.build.target != 'windows'
        uses: asdf-vm/actions/install@v3
      - name: 🧰 install nodejs for windows
        if: matrix.build.target == 'windows'
        uses: actions/setup-node@v4
        with:
          node-version: 23.6.0
      - name: ⚙️ install macos dependencies
        if: matrix.build.target == 'macos'
        run: echo "nothing to install"
      - name: ⚙️ install linux dependencies
        if: matrix.build.target == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            curl \
            file \
            jq \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libssl-dev \
            libudev-dev \
            libwebkit2gtk-4.1-dev \
            libxdo-dev \
            wget \
            xdg-utils
      - name: ⚙️ install dependencies
        run: npm clean-install
      - name: 🎯 install target
        run: npm run init:targets:${{ matrix.build.target }}
      - name: 📆 get next release
        run: |
          npx semantic-release --dryRun | grep 'Published release' | perl -n -e'/([0-9]+\.[0-9]+\.[0-9]+(?:-next\.[0-9]+))/ && print $1' > .this-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 📆 set next release
        if: matrix.build.target != 'windows'
        uses: actions/github-script@v7
        with:
          script: |
            const {readFile, writeFile} = require('node:fs/promises');
            const {resolve} = require('node:path');

            const cwd = process.cwd();
            let version;

            version = await readFile(resolve(cwd, '.this-release'), 'utf-8')
              .then(file => file.toString())
              .then(contents => contents.trim());

            if (!version) {
              console.log('could not find the next version from semantic-release, leaving versions untouched.');
              process.exit(0);
            }

            await readFile(resolve(cwd, 'package.json'), 'utf-8')
              .then(file => file.toString())
              .then(JSON.parse)
              .then(data => ({...data, version}))
              .then(data => JSON.stringify(data, null, 2))
              .then(contents => writeFile(resolve(cwd, 'package.json'), contents));
      - name: 📆 set next release for windows
        if: matrix.build.target == 'windows'
        uses: actions/github-script@v7
        with:
          script: |
            const {readFile, writeFile} = require('node:fs/promises');
            const {resolve} = require('node:path');

            const cwd = process.cwd();
            let version;

            version = await readFile(resolve(cwd, '.this-release'), 'utf-8')
              .then(file => file.toString())
              .then(contents => contents.trim());

            if (!version) {
              console.log('could not find the next version from semantic-release, leaving versions untouched.');
              process.exit(0);
            }
            
            version = version.replace('next.', '');

            await readFile(resolve(cwd, 'package.json'), 'utf-8')
              .then(file => file.toString())
              .then(JSON.parse)
              .then(data => ({...data, version}))
              .then(data => JSON.stringify(data, null, 2))
              .then(contents => writeFile(resolve(cwd, 'package.json'), contents));
      - name: 🗄️ build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ matrix.build.target }}-${{ hashFiles('**/Cargo.lock') }}
      - name: 🏗️ build release
        run: npm run build:release:${{ matrix.build.target }}
      - name: 🚛 move macos bundles
        if: matrix.build.target == 'macos'
        run: |
          mkdir -p releases/
          mv src-tauri/target/universal-apple-darwin/release/bundle/dmg/pandemonium_*.dmg releases/
      - name: 🚛 move windows bundles
        if: matrix.build.target == 'windows'
        run: |
          mkdir -p releases\
          mv src-tauri\target\x86_64-pc-windows-msvc\release\bundle\msi\pandemonium_0.1.0_x64_en-US.msi releases\
          mv src-tauri\target\x86_64-pc-windows-msvc\release\bundle\nsis\pandemonium_0.1.0_x64-setup.exe releases\
      - name: 🚛 move linux bundles
        if: matrix.build.target == 'linux'
        run: |
          mkdir -p releases/
          mv src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/pandemonium_*.deb releases/
          mv src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/rpm/pandemonium-*.rpm releases/
          mv src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/pandemonium_*.AppImage releases/
      - name: 📤 upload assets
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build.target }}-${{ github.run_id }}
          path: releases/
      - name: 🧼 tidy up macos
        if: matrix.build.target == 'macos'
        run: |
          rm -r src-tauri/target/universal-apple-darwin/release/bundle
      - name: 🧼 tidy up windows
        if: matrix.build.target == 'windows'
        run: |
          rm -r src-tauri\target\x86_64-pc-windows-msvc\release\bundle
      - name: 🧼 tidy up linux
        if: matrix.build.target == 'linux'
        run: |
          rm -r src-tauri/target/x86_64-unknown-linux-gnu/release/bundle

  publish:
    name: 🚀 publish release
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: 📥 checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 🧰 install toolchain
        uses: asdf-vm/actions/install@v3
      - name: ⚙️ install dependencies
        run: npm clean-install
      - name: 📥 download assets
        uses: actions/download-artifact@v4
        with:
          path: releases/
          merge-multiple: true
      - name: 🚀 publish release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
